# airs_flows.py

import requests
from requests.auth import HTTPBasicAuth
import json
import sys
import codecs
import makeDropRules

whiteList = []

lst = ['org.onosproject.core']

def get_request(url,request,restUser,restPassword):
    '''
    Params: base url for ONOS REST API and request 
    Return a JSON object
    '''

    response = requests.get(url + request, auth=(restUser, restPassword))
    if response.status_code == 200 or response.status_code ==204:
        return response.json()
    else:
        print ('{} : {}'.format (response.json()['code'], response.json()['message']))
        return -1 
def delete_request(url,request,restUser,restPassword):
    '''
    Params: base url for ONOS REST API and a delete request
    Return: HYYP status code
    '''
    response = requests.delete(url + request , auth=(restUser, restPassword))
    return response

def post_request(url, data,restUser,restPassword):
    '''
    Params: base url for ONOS REST API and post request
    Return: HTTP status code
    '''
    response = requests.post(url, data=data, headers={"Content-Type": "application/json"}, auth=(restUser, restPassword))
    return response

def get_flows(base_url,restUser,restPassword):
    '''
    ONOS REST API: GET /flows
    Param: base url for ONOs REST API 
    Retrun: a JSON obj returned from get_request() 
    '''
    result = []
    flows = get_request(base_url, 'flows',restUser,restPassword)
    if flows == -1:
        return
    if len(flows) == 0:
        print('flow rules not found!\n')
        return result
    for flow in flows['flows']:
        flow['id'] = int(flow['id'])
        flow['tableId'] = int(flow['tableId'])
        flow['groupId'] = int(flow['groupId'])
        flow['priority'] = int(flow['priority'])
        
        record = {
        'id': flow['id'],
        'tableId': flow['tableId'],
        'appId': flow['appId'],
        'groupId': flow['groupId'],
        'priority': flow['priority'],
        'isPermanent': flow['isPermanent'],
        'deviceId': flow['deviceId'],
        'treatment': flow['treatment'],
        'selector': flow['selector']
        }
        result.append(record)
    return result

def get_flowTblSize(base_url, tableId,restUser,restPassword):
    '''
    ONOs REST API: GET /flows/table/{tableLd}
    Params: base url for ONOS REST API and table ID
    Return: table size
    '''
    size = 0
    request = 'flows/table/' + str(tableId)
    flows = get_request(base_url, request,restUser,restPassword)
    if flows  == -1:
        return
    for flow in flows['flows']:
        size = size +1 
    return size    


def get_flowsAppIds(base_url,restUser,restPassword):
    '''
    Param: base url for ONOs REST API 
    Return: a set of application IDs that generated the flows
    '''
    result = []
    flows = get_flows(base_url,restUser,restPassword)
    if len(flows) <= 0:
        return result
    return {flow['appId'] for flow in flows}

def get_flowIds(base_url,restUser,restPassword):
    '''
    Param: base url for ONOs REST API
    Return: a list of all flow ids in the system 
    '''
    result = []
    flows = get_flows(base_url,restUser,restPassword)
    if len(flows) <= 0:
        return result
    return [flow['id'] for flow in flows]

def get_flowsByAppId(base_url, appId,restUser,restPassword):
    '''
    ONOS REST API: GET /flows/application/{appId}
    Param: base url for ONOS REST API and an application ID
    Return all the flow rules specified by the application ID 
    '''
    result = []
    appIds = get_flowsAppIds(base_url,restUser,restPassword)
    if len(appIds) <= 0:
        print('flow rules not found!\n')
        return result
    if appId not in appIds:
        print('application ID not found!')
        return result
    return get_request(base_url, "flows/application/" + appId,restUser,restPassword)

def get_flowsByDeviceId(base_url, dId,restUser,restPassword):
    '''
    ONOS REST API: GET /flows/{deviceId}
    Param: base url for ONOS REST API
    Return: all the flow rules specified by the device ID
    '''
    request = "flows/" + dId
    return get_request(base_url, request,restUser,restPassword)

def get_flowByFlowId(base_url, dId, fId,restUser,restPassword):
    '''
    ONOS REST API: GET /flows/{deviceId}/{flowId}
    Params: base url for ONOs Rest API, device ID and flow ID
    Return: the flow specified by flow ID
    '''
    request = "flows/" + dId +"/" + fId
    return get_request(base_url, request,restUser,restPassword)     
 
def get_flowIntents(base_url,restUser,restPassword):
    ''' 
    Param: base url for ONOS REST API
    Return: a list of flows generated by intents 
    '''
    result = []
    flows = get_flows(base_url,restUser,restPassword)
    if len(flows) <= 0:
        return result 
    return [flow for flow in flows if flow['appId'] == 'org.onosproject.net.intent']

def clear_flowsByAppId(base_url, appId,restUser,restPassword):
    '''
    ONOS REST API: DELETE /flows/application/{appId}
    Param: base url for ONOs REST API and an application ID that is not whitelisted
    Return: HTTP status code
    '''
    set_whitelistApp(lst)
    appIds = get_flowsAppIds(base_url,restUser,restPassword)
    if len(appIds) <= 0:
        return print('flow rules not found!\n')
    if appId not in appIds:
        return print('application ID not found!\n')
    if appId in whiteList:
        print('Error: delete flows by core application not allowed!')
        return

    request = "flows/application/" + appId
    delete_request(base_url, request,restUser,restPassword)

def post_flows(base_url, ifile,restUser,restPassword):
    '''
    ONOS REST API: Post /flows
    Param: base url for ONOs REST API and input JSON file
    Return: Http status code
    '''
    with codecs.open(ifile, "r", encoding="utf-8") as f:
        newFlow = json.load(f)
    url = base_url + "flows"
    response = post_request(url, data=json.dumps(newFlow),restUser,restPassword)
    print(response)
    f.close()
 
def flows2json(flows, ofile):
   '''
   Param: a list of flows and the name of outfile file
   Return: an output file containing flows in Json
   '''
   print(ofile)
   with open(ofile, "w") as outfile:
       for flow in flows:
           flow_obj = json.dumps(flow, indent = 4)
           outfile.write(flow_obj + "\n")

def set_whitelistApp(list):
    '''
    Params: a list of core applications for generating core flow rules
    Return: a white listed application ID
    '''
    global whiteList
    if(len(list) > len(whiteList)):
        whiteList = list[:]    


if __name__ == '__main__':

   
